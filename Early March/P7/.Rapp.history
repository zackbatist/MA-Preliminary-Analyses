source('BR.R')
source ('BR.R')
citation()
source BR.R
source ('BR.R')
library(igraph)
dat=read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE)
m=as.matrix(dat)
g=graph.adjacency(m,mode="undirected")
g
get.edgelist(graph, names=TRUE)
get.edgelist(g, names=TRUE)
dat=read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE)
m=as.matrix(dat)
g=graph.adjacency(m,mode="undirected",weighted=TRUE)
g
get.edgelist(g, names=TRUE)
write.graph(g, file, format+c("edgelist"))
write.graph(g, file, format+c("edgelist"), ...)
write.graph(g, file, format=c("edgelist"))
write.graph(g, format=c("edgelist"))
write.graph(g, file, format=c("edgelist"))
write.graph(g, el, format=c("edgelist"))
write.graph(g, el, format=("edgelist"))
write.graph(g, el, format=c("edgelist",))
write.graph(g, el, format=c("edgelist"))
g
get.edgelist(g, names=TRUE, weights=TRUE)
get.edgelist(g, names=TRUE, weight=TRUE)
get.edgelist(g, names=TRUE, weighted=TRUE)
get.edgelist(g, names=TRUE,weighted=TRUE)
get.edgelist(g, names=TRUE, attr='weight')
get.edgelist(g, names=TRUE, attr="weight")
get.edgelist(g, names=TRUE, round( E(g)$weight, 3 ))
cbind ( get.edgelist(g) , round ( E(g)$weight, 3 ))
write.graph(g, file, format=c()"edgelist")
write.graph(g, file, format=c("edgelist")
el.txt
el
write.graph(g, /zbatist/Dropbox/MA Thesis/g.txt, format=c("edgelist")
write.graph(g, zbatist/Dropbox/MA Thesis/g.txt, format=c("edgelist")
write.graph(g, "zbatist/Dropbox/MA Thesis/g.txt", format=c("edgelist")
write.graph(g, "/zbatist/Dropbox/MA Thesis/g.txt", format=c("edgelist")
write.graph(g, "Dropbox/MA Thesis/g.txt", format=c("edgelist")
g.txt
write.graph(g, "Dropbox/MA Thesis/g.txt", format=c("edgelist")
g
library(igraph)
dat=read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE)
m=as.matrix(dat)
g=graph.adjacency(m,mode="undirected",weighted=TRUE)
g
get.edgelist(g, names=TRUE)
get.adjacency(g)
get.adjacency(g, "upper", weighted=TRUE)
get.adjacency(g, type=c("upper"),#
       attr=TRUE, names=TRUE, binary=FALSE)
get.adjacency(g, type=c("upper"),#
       attr=NULL, names=TRUE, binary=FALSE)
get.adjacency(g, type=c("upper"),#
       names=TRUE, binary=FALSE)
get.adjacency(g, type=c("upper"), names=TRUE, binary=FALSE)
get.adjacency(g, type=c("upper"),#
       attr=edges, names=TRUE, binary=FALSE)
get.adjacency(g, type=c("upper"),#
       attr=edges, names=TRUE)
get.adjacency(g, type=c("upper"),attr=edge, names=TRUE)
get.adjacency(g, type=c("upper"),attr=edge, names=TRUE)
g
get.adjacency(g, type=c("upper"),weight=TRUE, names=TRUE)
get.adjacency(g, type=c("upper"),attr=weight, names=TRUE)
get.adjacency(g, type=c("upper"),attr: weight=TRUE, names=TRUE)
get.adjacency(g, type=c("upper"),attr=NULL wedges=TRUE, names=TRUE)
get.adjacency(g, type=c("upper"),attr=NULL edges=TRUE, names=TRUE)
get.adjacency(g, attr="weight",type=c("upper"),attr=NULL edges=TRUE, names=TRUE)
get.adjacency(g, type=c("upper"),attr=NULL names=TRUE)
get.adjacency(g, type=c("upper"),attr=NULL, names=TRUE)
get.adjacency(g, type=c("upper"),attr=edge, names=TRUE)
get.adjacency(g, type=c("upper"),attr=edges, names=TRUE)
get.adjacency(g, type=c("upper"),attr=TRUE, names=TRUE)
get.adjacency(g, type=c("upper"),attr=NULL, names=TRUE)
get.adjacency(g, type=c("upper"),attr=NULL, names=TRUE, weight=TRUE)
get.adjacency(g, type=c("upper"),attr=NULL, names=TRUE, weights=TRUE)
get.adjacency(g, type=c("upper"),attr=NULL, names=TRUE, weighted=TRUE)
get.adjacency(g, type=c("upper"),attr=NULL, names=TRUE, wdges=TRUE)
get.adjacency(g, type=c("upper"),attr=NULL, names=TRUE, edges=TRUE)
z=get.adjacency(g, type=c("upper"),attr=NULL, names=TRUE, edges=TRUE)
write.graph(g, file="p4.net", format=c("pajek"))
gn
gn=edge.betweenness.community (g, weights=E(g)$weight,directed=FALSE,edge.betweenness=TRUE,merges=TRUE,bridges=TRUE,modularity=TRUE,membership=TRUE)
gn
w=walktrap.community(g, weights = E(g)$weight, steps = 4, merges =#
          TRUE, modularity = TRUE, membership = TRUE)
w
dat=read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE)
m=as.matrix(dat)
g=graph.adjacency(m,mode="undirected",weighted=TRUE)
z=get.adjacency(g, type=c("upper"),attr=NULL, names=TRUE, edges=TRUE)
z
write.graph(g, file="p5.net", format=c("pajek"))
gn=edge.betweenness.community (g, weights=E(g)$weight,directed=FALSE,edge.betweenness=TRUE,merges=TRUE,bridges=TRUE,modularity=TRUE,membership=TRUE)
gn
w=walktrap.community(g, weights = E(g)$weight, steps = 4, merges =#
          TRUE, modularity = TRUE, membership = TRUE)
w
dat=read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE)
dat=read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE)
m=as.matrix(dat)
g=graph.adjacency(m,mode="undirected",weighted=TRUE)
get.adjacency(g, type=c("upper"),attr=NULL, names=TRUE, edges=TRUE)
write.graph(g, file="p6.net", format=c("pajek"))
gn=edge.betweenness.community (g, weights=E(g)$weight,directed=FALSE,edge.betweenness=TRUE,merges=TRUE,bridges=TRUE,modularity=TRUE,membership=TRUE)
gn
w
w=walktrap.community(g, weights = E(g)$weight, steps = 4, merges =#
          TRUE, modularity = TRUE, membership = TRUE)
w
dat=read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE)
m=as.matrix(dat)
g=graph.adjacency(m,mode="undirected",weighted=TRUE)
write.graph(g, file="p7.net", format=c("pajek"))
gn=edge.betweenness.community (g, weights=E(g)$weight,directed=FALSE,edge.betweenness=TRUE,merges=TRUE,bridges=TRUE,modularity=TRUE,membership=TRUE)
gn
w=walktrap.community(g, weights = E(g)$weight, steps = 4, merges =#
          TRUE, modularity = TRUE, membership = TRUE)
w
